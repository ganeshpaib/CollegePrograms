'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DISP_ID
    Inherits DataSet
    
    Private tableA_MUSIC_STOCK As A_MUSIC_STOCKDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("A_MUSIC_STOCK")) Is Nothing) Then
                Me.Tables.Add(New A_MUSIC_STOCKDataTable(ds.Tables("A_MUSIC_STOCK")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property A_MUSIC_STOCK As A_MUSIC_STOCKDataTable
        Get
            Return Me.tableA_MUSIC_STOCK
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DISP_ID = CType(MyBase.Clone,DISP_ID)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("A_MUSIC_STOCK")) Is Nothing) Then
            Me.Tables.Add(New A_MUSIC_STOCKDataTable(ds.Tables("A_MUSIC_STOCK")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableA_MUSIC_STOCK = CType(Me.Tables("A_MUSIC_STOCK"),A_MUSIC_STOCKDataTable)
        If (Not (Me.tableA_MUSIC_STOCK) Is Nothing) Then
            Me.tableA_MUSIC_STOCK.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DISP_ID"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DISP_ID.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableA_MUSIC_STOCK = New A_MUSIC_STOCKDataTable
        Me.Tables.Add(Me.tableA_MUSIC_STOCK)
    End Sub
    
    Private Function ShouldSerializeA_MUSIC_STOCK() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub A_MUSIC_STOCKRowChangeEventHandler(ByVal sender As Object, ByVal e As A_MUSIC_STOCKRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class A_MUSIC_STOCKDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnITEM_ID As DataColumn
        
        Private columnALBUM_NAME As DataColumn
        
        Private columnCATEGORY_ID As DataColumn
        
        Private columnUNITS As DataColumn
        
        Private columnSUPPLIER_ID As DataColumn
        
        Friend Sub New()
            MyBase.New("A_MUSIC_STOCK")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ITEM_IDColumn As DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        Friend ReadOnly Property ALBUM_NAMEColumn As DataColumn
            Get
                Return Me.columnALBUM_NAME
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORY_IDColumn As DataColumn
            Get
                Return Me.columnCATEGORY_ID
            End Get
        End Property
        
        Friend ReadOnly Property UNITSColumn As DataColumn
            Get
                Return Me.columnUNITS
            End Get
        End Property
        
        Friend ReadOnly Property SUPPLIER_IDColumn As DataColumn
            Get
                Return Me.columnSUPPLIER_ID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As A_MUSIC_STOCKRow
            Get
                Return CType(Me.Rows(index),A_MUSIC_STOCKRow)
            End Get
        End Property
        
        Public Event A_MUSIC_STOCKRowChanged As A_MUSIC_STOCKRowChangeEventHandler
        
        Public Event A_MUSIC_STOCKRowChanging As A_MUSIC_STOCKRowChangeEventHandler
        
        Public Event A_MUSIC_STOCKRowDeleted As A_MUSIC_STOCKRowChangeEventHandler
        
        Public Event A_MUSIC_STOCKRowDeleting As A_MUSIC_STOCKRowChangeEventHandler
        
        Public Overloads Sub AddA_MUSIC_STOCKRow(ByVal row As A_MUSIC_STOCKRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddA_MUSIC_STOCKRow(ByVal ITEM_ID As String, ByVal ALBUM_NAME As String, ByVal CATEGORY_ID As String, ByVal UNITS As Decimal, ByVal SUPPLIER_ID As String) As A_MUSIC_STOCKRow
            Dim rowA_MUSIC_STOCKRow As A_MUSIC_STOCKRow = CType(Me.NewRow,A_MUSIC_STOCKRow)
            rowA_MUSIC_STOCKRow.ItemArray = New Object() {ITEM_ID, ALBUM_NAME, CATEGORY_ID, UNITS, SUPPLIER_ID}
            Me.Rows.Add(rowA_MUSIC_STOCKRow)
            Return rowA_MUSIC_STOCKRow
        End Function
        
        Public Function FindByALBUM_NAME(ByVal ALBUM_NAME As String) As A_MUSIC_STOCKRow
            Return CType(Me.Rows.Find(New Object() {ALBUM_NAME}),A_MUSIC_STOCKRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As A_MUSIC_STOCKDataTable = CType(MyBase.Clone,A_MUSIC_STOCKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New A_MUSIC_STOCKDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnITEM_ID = Me.Columns("ITEM_ID")
            Me.columnALBUM_NAME = Me.Columns("ALBUM_NAME")
            Me.columnCATEGORY_ID = Me.Columns("CATEGORY_ID")
            Me.columnUNITS = Me.Columns("UNITS")
            Me.columnSUPPLIER_ID = Me.Columns("SUPPLIER_ID")
        End Sub
        
        Private Sub InitClass()
            Me.columnITEM_ID = New DataColumn("ITEM_ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEM_ID)
            Me.columnALBUM_NAME = New DataColumn("ALBUM_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnALBUM_NAME)
            Me.columnCATEGORY_ID = New DataColumn("CATEGORY_ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY_ID)
            Me.columnUNITS = New DataColumn("UNITS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUNITS)
            Me.columnSUPPLIER_ID = New DataColumn("SUPPLIER_ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUPPLIER_ID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnALBUM_NAME}, true))
            Me.columnALBUM_NAME.AllowDBNull = false
            Me.columnALBUM_NAME.Unique = true
        End Sub
        
        Public Function NewA_MUSIC_STOCKRow() As A_MUSIC_STOCKRow
            Return CType(Me.NewRow,A_MUSIC_STOCKRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New A_MUSIC_STOCKRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(A_MUSIC_STOCKRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.A_MUSIC_STOCKRowChangedEvent) Is Nothing) Then
                RaiseEvent A_MUSIC_STOCKRowChanged(Me, New A_MUSIC_STOCKRowChangeEvent(CType(e.Row,A_MUSIC_STOCKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.A_MUSIC_STOCKRowChangingEvent) Is Nothing) Then
                RaiseEvent A_MUSIC_STOCKRowChanging(Me, New A_MUSIC_STOCKRowChangeEvent(CType(e.Row,A_MUSIC_STOCKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.A_MUSIC_STOCKRowDeletedEvent) Is Nothing) Then
                RaiseEvent A_MUSIC_STOCKRowDeleted(Me, New A_MUSIC_STOCKRowChangeEvent(CType(e.Row,A_MUSIC_STOCKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.A_MUSIC_STOCKRowDeletingEvent) Is Nothing) Then
                RaiseEvent A_MUSIC_STOCKRowDeleting(Me, New A_MUSIC_STOCKRowChangeEvent(CType(e.Row,A_MUSIC_STOCKRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveA_MUSIC_STOCKRow(ByVal row As A_MUSIC_STOCKRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class A_MUSIC_STOCKRow
        Inherits DataRow
        
        Private tableA_MUSIC_STOCK As A_MUSIC_STOCKDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableA_MUSIC_STOCK = CType(Me.Table,A_MUSIC_STOCKDataTable)
        End Sub
        
        Public Property ITEM_ID As String
            Get
                Try 
                    Return CType(Me(Me.tableA_MUSIC_STOCK.ITEM_IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableA_MUSIC_STOCK.ITEM_IDColumn) = value
            End Set
        End Property
        
        Public Property ALBUM_NAME As String
            Get
                Return CType(Me(Me.tableA_MUSIC_STOCK.ALBUM_NAMEColumn),String)
            End Get
            Set
                Me(Me.tableA_MUSIC_STOCK.ALBUM_NAMEColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY_ID As String
            Get
                Try 
                    Return CType(Me(Me.tableA_MUSIC_STOCK.CATEGORY_IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableA_MUSIC_STOCK.CATEGORY_IDColumn) = value
            End Set
        End Property
        
        Public Property UNITS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableA_MUSIC_STOCK.UNITSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableA_MUSIC_STOCK.UNITSColumn) = value
            End Set
        End Property
        
        Public Property SUPPLIER_ID As String
            Get
                Try 
                    Return CType(Me(Me.tableA_MUSIC_STOCK.SUPPLIER_IDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableA_MUSIC_STOCK.SUPPLIER_IDColumn) = value
            End Set
        End Property
        
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tableA_MUSIC_STOCK.ITEM_IDColumn)
        End Function
        
        Public Sub SetITEM_IDNull()
            Me(Me.tableA_MUSIC_STOCK.ITEM_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORY_IDNull() As Boolean
            Return Me.IsNull(Me.tableA_MUSIC_STOCK.CATEGORY_IDColumn)
        End Function
        
        Public Sub SetCATEGORY_IDNull()
            Me(Me.tableA_MUSIC_STOCK.CATEGORY_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUNITSNull() As Boolean
            Return Me.IsNull(Me.tableA_MUSIC_STOCK.UNITSColumn)
        End Function
        
        Public Sub SetUNITSNull()
            Me(Me.tableA_MUSIC_STOCK.UNITSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUPPLIER_IDNull() As Boolean
            Return Me.IsNull(Me.tableA_MUSIC_STOCK.SUPPLIER_IDColumn)
        End Function
        
        Public Sub SetSUPPLIER_IDNull()
            Me(Me.tableA_MUSIC_STOCK.SUPPLIER_IDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class A_MUSIC_STOCKRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As A_MUSIC_STOCKRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As A_MUSIC_STOCKRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As A_MUSIC_STOCKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
