'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class sup
    Inherits DataSet
    
    Private tableA_MUSIC_SUPPLIER As A_MUSIC_SUPPLIERDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("A_MUSIC_SUPPLIER")) Is Nothing) Then
                Me.Tables.Add(New A_MUSIC_SUPPLIERDataTable(ds.Tables("A_MUSIC_SUPPLIER")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property A_MUSIC_SUPPLIER As A_MUSIC_SUPPLIERDataTable
        Get
            Return Me.tableA_MUSIC_SUPPLIER
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As sup = CType(MyBase.Clone,sup)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("A_MUSIC_SUPPLIER")) Is Nothing) Then
            Me.Tables.Add(New A_MUSIC_SUPPLIERDataTable(ds.Tables("A_MUSIC_SUPPLIER")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableA_MUSIC_SUPPLIER = CType(Me.Tables("A_MUSIC_SUPPLIER"),A_MUSIC_SUPPLIERDataTable)
        If (Not (Me.tableA_MUSIC_SUPPLIER) Is Nothing) Then
            Me.tableA_MUSIC_SUPPLIER.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "sup"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/sup.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableA_MUSIC_SUPPLIER = New A_MUSIC_SUPPLIERDataTable
        Me.Tables.Add(Me.tableA_MUSIC_SUPPLIER)
    End Sub
    
    Private Function ShouldSerializeA_MUSIC_SUPPLIER() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub A_MUSIC_SUPPLIERRowChangeEventHandler(ByVal sender As Object, ByVal e As A_MUSIC_SUPPLIERRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class A_MUSIC_SUPPLIERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSUPPLIER_ID As DataColumn
        
        Private columnSUPPLIER_NAME As DataColumn
        
        Private columnADDRESS As DataColumn
        
        Private columnPHONE As DataColumn
        
        Friend Sub New()
            MyBase.New("A_MUSIC_SUPPLIER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SUPPLIER_IDColumn As DataColumn
            Get
                Return Me.columnSUPPLIER_ID
            End Get
        End Property
        
        Friend ReadOnly Property SUPPLIER_NAMEColumn As DataColumn
            Get
                Return Me.columnSUPPLIER_NAME
            End Get
        End Property
        
        Friend ReadOnly Property ADDRESSColumn As DataColumn
            Get
                Return Me.columnADDRESS
            End Get
        End Property
        
        Friend ReadOnly Property PHONEColumn As DataColumn
            Get
                Return Me.columnPHONE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As A_MUSIC_SUPPLIERRow
            Get
                Return CType(Me.Rows(index),A_MUSIC_SUPPLIERRow)
            End Get
        End Property
        
        Public Event A_MUSIC_SUPPLIERRowChanged As A_MUSIC_SUPPLIERRowChangeEventHandler
        
        Public Event A_MUSIC_SUPPLIERRowChanging As A_MUSIC_SUPPLIERRowChangeEventHandler
        
        Public Event A_MUSIC_SUPPLIERRowDeleted As A_MUSIC_SUPPLIERRowChangeEventHandler
        
        Public Event A_MUSIC_SUPPLIERRowDeleting As A_MUSIC_SUPPLIERRowChangeEventHandler
        
        Public Overloads Sub AddA_MUSIC_SUPPLIERRow(ByVal row As A_MUSIC_SUPPLIERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddA_MUSIC_SUPPLIERRow(ByVal SUPPLIER_ID As String, ByVal SUPPLIER_NAME As String, ByVal ADDRESS As String, ByVal PHONE As String) As A_MUSIC_SUPPLIERRow
            Dim rowA_MUSIC_SUPPLIERRow As A_MUSIC_SUPPLIERRow = CType(Me.NewRow,A_MUSIC_SUPPLIERRow)
            rowA_MUSIC_SUPPLIERRow.ItemArray = New Object() {SUPPLIER_ID, SUPPLIER_NAME, ADDRESS, PHONE}
            Me.Rows.Add(rowA_MUSIC_SUPPLIERRow)
            Return rowA_MUSIC_SUPPLIERRow
        End Function
        
        Public Function FindBySUPPLIER_ID(ByVal SUPPLIER_ID As String) As A_MUSIC_SUPPLIERRow
            Return CType(Me.Rows.Find(New Object() {SUPPLIER_ID}),A_MUSIC_SUPPLIERRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As A_MUSIC_SUPPLIERDataTable = CType(MyBase.Clone,A_MUSIC_SUPPLIERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New A_MUSIC_SUPPLIERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSUPPLIER_ID = Me.Columns("SUPPLIER_ID")
            Me.columnSUPPLIER_NAME = Me.Columns("SUPPLIER_NAME")
            Me.columnADDRESS = Me.Columns("ADDRESS")
            Me.columnPHONE = Me.Columns("PHONE")
        End Sub
        
        Private Sub InitClass()
            Me.columnSUPPLIER_ID = New DataColumn("SUPPLIER_ID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUPPLIER_ID)
            Me.columnSUPPLIER_NAME = New DataColumn("SUPPLIER_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUPPLIER_NAME)
            Me.columnADDRESS = New DataColumn("ADDRESS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDRESS)
            Me.columnPHONE = New DataColumn("PHONE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHONE)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSUPPLIER_ID}, true))
            Me.columnSUPPLIER_ID.AllowDBNull = false
            Me.columnSUPPLIER_ID.Unique = true
        End Sub
        
        Public Function NewA_MUSIC_SUPPLIERRow() As A_MUSIC_SUPPLIERRow
            Return CType(Me.NewRow,A_MUSIC_SUPPLIERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New A_MUSIC_SUPPLIERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(A_MUSIC_SUPPLIERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.A_MUSIC_SUPPLIERRowChangedEvent) Is Nothing) Then
                RaiseEvent A_MUSIC_SUPPLIERRowChanged(Me, New A_MUSIC_SUPPLIERRowChangeEvent(CType(e.Row,A_MUSIC_SUPPLIERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.A_MUSIC_SUPPLIERRowChangingEvent) Is Nothing) Then
                RaiseEvent A_MUSIC_SUPPLIERRowChanging(Me, New A_MUSIC_SUPPLIERRowChangeEvent(CType(e.Row,A_MUSIC_SUPPLIERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.A_MUSIC_SUPPLIERRowDeletedEvent) Is Nothing) Then
                RaiseEvent A_MUSIC_SUPPLIERRowDeleted(Me, New A_MUSIC_SUPPLIERRowChangeEvent(CType(e.Row,A_MUSIC_SUPPLIERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.A_MUSIC_SUPPLIERRowDeletingEvent) Is Nothing) Then
                RaiseEvent A_MUSIC_SUPPLIERRowDeleting(Me, New A_MUSIC_SUPPLIERRowChangeEvent(CType(e.Row,A_MUSIC_SUPPLIERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveA_MUSIC_SUPPLIERRow(ByVal row As A_MUSIC_SUPPLIERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class A_MUSIC_SUPPLIERRow
        Inherits DataRow
        
        Private tableA_MUSIC_SUPPLIER As A_MUSIC_SUPPLIERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableA_MUSIC_SUPPLIER = CType(Me.Table,A_MUSIC_SUPPLIERDataTable)
        End Sub
        
        Public Property SUPPLIER_ID As String
            Get
                Return CType(Me(Me.tableA_MUSIC_SUPPLIER.SUPPLIER_IDColumn),String)
            End Get
            Set
                Me(Me.tableA_MUSIC_SUPPLIER.SUPPLIER_IDColumn) = value
            End Set
        End Property
        
        Public Property SUPPLIER_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableA_MUSIC_SUPPLIER.SUPPLIER_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableA_MUSIC_SUPPLIER.SUPPLIER_NAMEColumn) = value
            End Set
        End Property
        
        Public Property ADDRESS As String
            Get
                Try 
                    Return CType(Me(Me.tableA_MUSIC_SUPPLIER.ADDRESSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableA_MUSIC_SUPPLIER.ADDRESSColumn) = value
            End Set
        End Property
        
        Public Property PHONE As String
            Get
                Try 
                    Return CType(Me(Me.tableA_MUSIC_SUPPLIER.PHONEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableA_MUSIC_SUPPLIER.PHONEColumn) = value
            End Set
        End Property
        
        Public Function IsSUPPLIER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableA_MUSIC_SUPPLIER.SUPPLIER_NAMEColumn)
        End Function
        
        Public Sub SetSUPPLIER_NAMENull()
            Me(Me.tableA_MUSIC_SUPPLIER.SUPPLIER_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableA_MUSIC_SUPPLIER.ADDRESSColumn)
        End Function
        
        Public Sub SetADDRESSNull()
            Me(Me.tableA_MUSIC_SUPPLIER.ADDRESSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPHONENull() As Boolean
            Return Me.IsNull(Me.tableA_MUSIC_SUPPLIER.PHONEColumn)
        End Function
        
        Public Sub SetPHONENull()
            Me(Me.tableA_MUSIC_SUPPLIER.PHONEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class A_MUSIC_SUPPLIERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As A_MUSIC_SUPPLIERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As A_MUSIC_SUPPLIERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As A_MUSIC_SUPPLIERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
